package com.myseotoolbox.crawler;import com.myseotoolbox.crawler.http.HttpResponse;import com.myseotoolbox.crawler.http.RedirectChainScanner;import com.myseotoolbox.crawler.http.RedirectLoopException;import com.myseotoolbox.crawler.http.WebPageReader;import com.myseotoolbox.crawler.model.RedirectChain;import com.myseotoolbox.crawler.model.WebPage;import lombok.extern.slf4j.Slf4j;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import java.io.IOException;import java.net.HttpURLConnection;import java.net.URI;import java.util.*;import java.util.function.Consumer;import java.util.function.Function;import java.util.function.Predicate;import java.util.stream.Collectors;import java.util.stream.Stream;import static com.myseotoolbox.utils.StreamUtils.not;import static java.nio.charset.StandardCharsets.UTF_8;@Slf4jpublic class Crawler {    private final Queue<URI> toVisit = new LinkedList<>();    private final Set<URI> visited = new HashSet<>();    private final Consumer<WebPage> listener;    private final Predicate<URI> shouldVisit;    private final WebPageReader reader;    public Crawler(Consumer<WebPage> listener, WebPageReader reader, Predicate<URI> uriFilter) {        this.listener = listener;        this.reader = reader;        this.shouldVisit = uriFilter;    }    public void addSeed(URI uri) {        addUriToQueue(uri);    }    /**     * Blocking     */    public void run() {        while (!toVisit.isEmpty()) {            URI curUri = toVisit.poll();            if (shouldVisit.test(curUri)) {                try {                    WebPage page = reader.visit(curUri);                    visited.add(curUri);                    List<URI> pageLinks = page.getOutboundLinks();                    enqueueNewLinks(pageLinks);                    listener.accept(page);                } catch (RedirectLoopException | IOException e) {                    e.printStackTrace();                    //TODO:                    throw new UnsupportedOperationException("Not implemented yet!" + e);                }            }        }    }    private void addUriToQueue(URI uri) {        toVisit.add(removeFragment(uri));    }    private void enqueueNewLinks(List<URI> pageLinks) {        pageLinks.stream()                .map(this::removeFragment)                .filter(not(this::duplicate))                .filter(shouldVisit)                .forEach(this::addUriToQueue);    }    private boolean duplicate(URI uri) {        return visited.contains(uri) || toVisit.contains(uri);    }    private URI removeFragment(URI uri) {        if (uri.getFragment() == null) return uri;        return URI.create(uri.toASCIIString().split("#")[0]);    }}